name: CI

on: [push, pull_request]

env:
  PUB_ENVIRONMENT: bot.github

jobs:
  # Compile the latest sqlite3 library, which will be used to run tests in drift
  # and sqlparser
  compile_sqlite3:
    strategy:
      matrix:
        # We only really need this for Ubuntu, but we recommend users run the same
        # steps so we better make sure they work on all platforms.
        os: [ubuntu-latest, macos-latest, windows-latest]
    name: "Compile sqlite3 for tests"
    runs-on: ${{ matrix.os }}
    steps:
      - uses: actions/checkout@v2
      - uses: actions/cache@v3
        id: cache_build
        with:
          path: drift/.dart_tool/sqlite3/
          key: ${{ runner.os }}-${{ hashFiles('drift/tool/') }}
      - name: Download Dart
        if: steps.cache_build.outputs.cache-hit != 'true'
        uses: dart-lang/setup-dart@v1
      - name: Compile sqlite3
        if: steps.cache_build.outputs.cache-hit != 'true'
        run: |
          dart pub global activate melos
          melos bootstrap --scope drift
          dart run drift/tool/download_sqlite3.dart
      - name: Upload built sqlite3 binaries
        uses: actions/upload-artifact@v2
        # we only need these artifacts on Linux since we run unit tests on Linux only
        if: runner.os == 'Linux'
        with:
          name: sqlite3
          path: drift/.dart_tool/sqlite3/
          if-no-files-found: error
          retention-days: 1

  dart_dependencies:
    name: Get and cache Dart dependencies
    runs-on: ubuntu-latest
    outputs:
      dart_version: ${{ steps.dart_version.outputs.version }}
    steps:
      - uses: actions/checkout@v3
      - uses: dart-lang/setup-dart@v1
      - name: Get Dart version
        id: dart_version
        run: |
          version=`cat $DART_HOME/version`
          echo "Running on Dart $version"
          echo "::set-output name=version::$version"
      - uses: actions/cache@v3
        with:
          path: "${{ env.PUB_CACHE }}"
          key: dart-dependencies-${{ steps.dart_version.outputs.version }}-${{ hashFiles('**/pubspec.yaml') }}
          restore-keys: |
            dart-dependencies-${{ steps.dart_version.outputs.version }}-
            dart-dependencies-
      - name: Setup melos
        run: dart pub global activate melos
      - name: Get Dart dependencies
        run: melos bootstrap --no-flutter

  docs:
    name: "Documentation"
    needs: [compile_sqlite3, dart_dependencies]
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: docs

    steps:
      - uses: actions/checkout@v3
      - uses: dart-lang/setup-dart@v1
      - name: Download sqlite3
        uses: actions/download-artifact@v4.1.7
        with:
          name: sqlite3
          path: /tmp/sqlite/out/
      - name: Use downloaded sqlite3
        run: |
          chmod a+x /tmp/sqlite/out/sqlite3
          echo "/tmp/sqlite/out" >> $GITHUB_PATH
          echo "LD_LIBRARY_PATH=/tmp/sqlite/out" >> $GITHUB_ENV
      - name: Check sqlite3 version
        run: sqlite3 --version
      - uses: actions/cache@v3
        with:
          path: "${{ env.PUB_CACHE }}"
          key: dart-dependencies-${{ needs.dart_dependencies.outputs.dart_version }}-${{ hashFiles('**/pubspec.yaml') }}
          restore-keys: |
            dart-dependencies-${{ needs.dart_dependencies.outputs.dart_version }}-
            dart-dependencies-
      - run: dart pub global activate melos && melos bootstrap --scope drift_docs,drift
        working-directory: .
      - name: Run build
        env:
          IS_RELEASE: ${{ github.event_name == 'push' && github.event.ref == 'refs/heads/latest-release' }}
        run: dart run tool/ci_build.dart
      - name: Analyze Dart and Drift sources
        run: |
          dart format -o none --set-exit-if-changed .
          dart analyze --fatal-infos --fatal-warnings
          dart run drift_dev analyze
      - run: dart test

      - name: Deploy to netlify (Branch)
        if: ${{ github.event_name == 'push' }}
        uses: nwtgck/actions-netlify@v1.2
        with:
          production-branch: latest-release
          publish-dir: docs/deploy
          enable-pull-request-comment: true
          enable-commit-comment: false
          netlify-config-path: "./netlify.toml"
          github-token: ${{ secrets.GITHUB_TOKEN }}
        env:
          NETLIFY_AUTH_TOKEN: ${{ secrets.NETLIFY_AUTH_TOKEN }}
          NETLIFY_SITE_ID: ${{ secrets.NETLIFY_SITE_ID }}
      - name: Deploy to netlify (Pull Request)
        if: ${{ github.event_name == 'pull_request' }}
        uses: nwtgck/actions-netlify@v1.2
        with:
          production-branch: latest-release
          publish-dir: docs/deploy
          enable-pull-request-comment: true
          enable-commit-comment: false
          netlify-config-path: "./netlify.toml"
          github-token: ${{ secrets.GITHUB_TOKEN }}
          alias: deploy-preview-${{ github.event.number }}
        env:
          NETLIFY_AUTH_TOKEN: ${{ secrets.NETLIFY_AUTH_TOKEN }}
          NETLIFY_SITE_ID: ${{ secrets.NETLIFY_SITE_ID }}

  drift:
    name: "drift package"
    needs: [compile_sqlite3, dart_dependencies]
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: drift
    steps:
      # setup
      - uses: actions/checkout@v3
      - uses: dart-lang/setup-dart@v1
      - name: Download sqlite3
        uses: actions/download-artifact@v4.1.7
        with:
          name: sqlite3
          path: drift/.dart_tool/sqlite3/
      - name: Use downloaded sqlite3
        run: |
          chmod a+x .dart_tool/sqlite3//sqlite3
          echo "/tmp/sqlite/out" >> $GITHUB_PATH
          echo "LD_LIBRARY_PATH=/tmp/sqlite/out" >> $GITHUB_ENV
      - name: Check sqlite3 version
        run: sqlite3 --version
      - uses: actions/cache@v3
        with:
          path: "${{ env.PUB_CACHE }}"
          key: dart-dependencies-${{ needs.dart_dependencies.outputs.dart_version }}-${{ hashFiles('**/pubspec.yaml') }}
          restore-keys: |
            dart-dependencies-${{ needs.dart_dependencies.outputs.dart_version }}-
            dart-dependencies-
      - run: dart pub global activate melos && melos bootstrap --scope drift
        working-directory: .
      - name: Get dependencies for plugin
        run: |
          echo "dependency_overrides:" >> pubspec_overrides.yaml
          echo "  drift: {path: ../../}" >> pubspec_overrides.yaml
          echo "  drift_dev: {path: ../../../drift_dev}" >> pubspec_overrides.yaml
          echo "  sqlparser: {path: ../../../sqlparser}" >> pubspec_overrides.yaml
          dart pub get
        working-directory: drift/tools/analyzer_plugin
      # analysis
      - run: dart format -o none --set-exit-if-changed .
        name: dartfmt
      - run: dart analyze --fatal-infos --fatal-warnings
      # build, test and upload coverage
      - run: dart run build_runner build --delete-conflicting-outputs
      - run: dart test --preset ci_unit_tests #-x background_isolate --coverage=coverage
#      - uses: actions/upload-artifact@v2
#        with:
#          name: moor-coverage-data
#          path: |
#            moor/coverage/
#            moor/.dart_tool/package_config.json
#          retention-days: 1

  drift_dev:
    runs-on: ubuntu-latest
    needs: [dart_dependencies]
    timeout-minutes: 10
    defaults:
      run:
        working-directory: drift_dev
    steps:
    # setup
    - uses: actions/checkout@v3
    - uses: dart-lang/setup-dart@v1
    - uses: actions/cache@v3
      with:
        path: "${{ env.PUB_CACHE }}"
        key: dart-dependencies-${{ needs.dart_dependencies.outputs.dart_version }}-${{ hashFiles('**/pubspec.yaml') }}
        restore-keys: |
          dart-dependencies-${{ needs.dart_dependencies.outputs.dart_version }}-
          dart-dependencies-
    - run: dart pub global activate melos && melos bootstrap --scope drift_dev
      working-directory: .
    # analysis
    - run: dart format -o none --set-exit-if-changed .
      name: dartfmt
    - run: dart analyze --fatal-infos --fatal-warnings
    - run: dart test
      name: test

  sqlparser:
    runs-on: ubuntu-latest
    needs: [compile_sqlite3, dart_dependencies]
    defaults:
      run:
        working-directory: sqlparser
    steps:
      # setup
      - uses: actions/checkout@v2
      - uses: dart-lang/setup-dart@v1
      - name: Download sqlite3
        uses: actions/download-artifact@v4.1.7
        with:
          name: sqlite3
          path: /tmp/sqlite/out/
      - name: Use downloaded sqlite3
        run: |
          chmod a+x /tmp/sqlite/out/sqlite3
          echo "/tmp/sqlite/out" >> $GITHUB_PATH
          echo "LD_LIBRARY_PATH=/tmp/sqlite/out" >> $GITHUB_ENV
      - uses: actions/cache@v3
        with:
          path: "${{ env.PUB_CACHE }}"
          key: dart-dependencies-${{ needs.dart_dependencies.outputs.dart_version }}-${{ hashFiles('**/pubspec.yaml') }}
          restore-keys: |
            dart-dependencies-${{ needs.dart_dependencies.outputs.dart_version }}-
            dart-dependencies-
      - run: dart pub upgrade
      # analysis
      - run: dart format -o none --set-exit-if-changed .
        name: dartfmt
      - run: dart analyze --fatal-infos --fatal-warnings
      # tests and coverage
      - run: dart test #--coverage=coverage
#      - uses: actions/upload-artifact@v2
#        with:
#          name: sqlparser-coverage-data
#          path: |
#            sqlparser/coverage/
#            sqlparser/.dart_tool/package_config.json
#          retention-days: 1

  misc_integration_tests:
    name: "Integration tests"
    needs: [compile_sqlite3, dart_dependencies]
    runs-on: ubuntu-latest
    services:
      postgres:
        image: postgres
        env:
          POSTGRES_PASSWORD: postgres
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432
    steps:
      - uses: actions/checkout@v3
      - uses: dart-lang/setup-dart@v1
      - name: Download sqlite3
        uses: actions/download-artifact@v4.1.7
        with:
          name: sqlite3
          path: /tmp/sqlite/out/
      - name: Use downloaded sqlite3
        run: |
          chmod a+x /tmp/sqlite/out/sqlite3
          echo "/tmp/sqlite/out" >> $GITHUB_PATH
          echo "LD_LIBRARY_PATH=/tmp/sqlite/out" >> $GITHUB_ENV
      - uses: actions/cache@v3
        with:
          path: "${{ env.PUB_CACHE }}"
          key: dart-dependencies-${{ needs.dart_dependencies.outputs.dart_version }}-${{ hashFiles('**/pubspec.yaml') }}
          restore-keys: |
            dart-dependencies-
      - run: dart pub global activate melos && melos bootstrap --no-flutter
        working-directory: .
      - run: tool/misc_integration_test.sh

  migration_integration_tests:
    name: "Integration tests for migration tooling"
    needs: [compile_sqlite3, dart_dependencies]
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      - uses: dart-lang/setup-dart@v1
      - name: Download sqlite3
        uses: actions/download-artifact@v4.1.7
        with:
          name: sqlite3
          path: /tmp/sqlite/out/
      - name: Use downloaded sqlite3
        run: |
          chmod a+x /tmp/sqlite/out/sqlite3
          echo "/tmp/sqlite/out" >> $GITHUB_PATH
          echo "LD_LIBRARY_PATH=/tmp/sqlite/out" >> $GITHUB_ENV
      - uses: actions/cache@v3
        with:
          path: "${{ env.PUB_CACHE }}"
          key: dart-dependencies-${{ needs.dart_dependencies.outputs.dart_version }}-${{ hashFiles('**/pubspec.yaml') }}
          restore-keys: |
            dart-dependencies-
      - run: dart pub global activate melos && melos bootstrap --scope migrations_example
        working-directory: .
      - name: Run build
        working-directory: examples/migrations_example
        run: |
          dart run build_runner build --delete-conflicting-outputs
          dart run drift_dev schema generate drift_migrations/ test/generated/ --data-classes --companions
          dart run drift_dev schema generate drift_migrations/ lib/src/generated
      - name: Test
        working-directory: examples/migrations_example
        run: dart test
      - name: Check that extracting schema still works
        working-directory: examples/migrations_example
        run: dart run drift_dev schema dump lib/database.dart drift_migrations/

#  upload_coverage:
#    runs-on: ubuntu-20.04
#    needs: [moor, sqlparser]
#    steps:
#      - uses: actions/checkout@v2
#      - uses: dart-lang/setup-dart@v1
#      - run: dart pub upgrade
#        name: "Setup coverage processor"
#        working-directory: extras/tooling
#      - uses: actions/download-artifact@v4.1.7
#        with:
#          name: moor-coverage-data
#          path: moor/
#      - uses: actions/download-artifact@v4.1.7
#        with:
#          name: sqlparser-coverage-data
#          path: sqlparser/
#      - run: dart run extras/tooling/bin/coverage.dart
#        name: "Format coverage from raw data"
#      - uses: codecov/codecov-action@v1
#        with:
#          file: lcov.info
